<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-11-05T23:38:36-06:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Arturo Javier-Castellanos</title><subtitle>Personal website of Arturo Javier Castellanos.</subtitle><entry><title type="html">Making my first React app</title><link href="http://localhost:4000/react/2022/01/06/making-my-first-react-app.html" rel="alternate" type="text/html" title="Making my first React app" /><published>2022-01-06T16:04:39-06:00</published><updated>2022-01-06T16:04:39-06:00</updated><id>http://localhost:4000/react/2022/01/06/making-my-first-react-app</id><content type="html" xml:base="http://localhost:4000/react/2022/01/06/making-my-first-react-app.html">&lt;p&gt;As I mentioned in my previous post, my plan for teaching myself web development is to build a largeish project after each course I complete. The last course I completed was Brad Traversy’s React Front to Back, and so around three weeks or four ago, I set out to build my first React app. Here are the &lt;a href=&quot;http://groupreads.herokuapp.com/&quot;&gt;results&lt;/a&gt;, and here is the &lt;a href=&quot;https://github.com/arturo-jc/groupreads&quot;&gt;repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So, what did I learn making this project? Obviously, I learned the basics of React: how to create a component, how to import one component into another, etc. Too many things to list, to be honest. But the most valuable thing I learned, I think, is I got a big-picture sense of how React works. This is important because while Brad’s course spent a great deal of time on the nuts and bolts, he didn’t really say much about why use React in the first place, how React works, etc. (This is not meant as a criticism. I think Brad just assumes that if you’ve enrolled in his course, you already know why you want to use React.) Anyway, here’s the sense I got from building my own app. And as a disclaimer, what follows is just that: my current sense or understanding of the framework based on my limited experience with it. I’m sure my understanding will evolve as I get more practice.&lt;/p&gt;

&lt;h2 id=&quot;the-big-picture&quot;&gt;The big picture&lt;/h2&gt;
&lt;p&gt;One of my first impressions after using React is how long it takes to build an app. I’m sure a lot it can be chalked up to my own inexperience, but I suspect a lot of it has to do with the sheer amount of things that need to get done. For a full stack app like I made, you need to build both a backend and a frontend. It really feels like making two apps. So, why bother with React? Because your content is rendered a lot faster.&lt;/p&gt;

&lt;p&gt;With traditional web applications, your server does double duty. It builds a user interface, and it does a bunch of other stuff such as talking to the database. Then it puts everything together, and sends a bunch of files (mainly HTML, CSS and JS) to the browser. And it does this pretty much every time it receives a request. So, every time your server receives a request, it sends a bunch of stuff back: it sends both instructions for how to render the UI, as well as the data the user needs.&lt;/p&gt;

&lt;p&gt;The advantage of using React is you don’t need to send the instructions for rendering the UI every time. Your server sends these instructions once, and upon further requests, all it sends is the data the user actually needs to see. Basically, it delegates the rendering of the UI to the browser so it can focus on other tasks like talking to the database, and so it doesn’t have to keep sending instruction for rendering the UI. No need to keep sending a bunch of HTML, CSS and JS files every time! Just the data the user actually needs–things like strings, numbers, and dates depending on the application. That’s a lot less information that’s being sent from your server to your browser, which accounts for why React apps are faster.&lt;/p&gt;

&lt;h2 id=&quot;state&quot;&gt;State&lt;/h2&gt;
&lt;p&gt;So, that’s the basic picture I got of React itself. Now for this application, I had to use something called state. Often you want a component to be rendered differently at different times. Simple example: when a user clicks on “Delete account”, you don’t want to delete the account right away (what if they clicked by mistake?). Rather, you want to display a confirmation modal or something like that. This modal component needs to be rendered differently at different times: by default, it should not be displayed at all, but it should be displayed if the user clicks “Delete account”. The way you do this in React is you give the component a state (such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;show&lt;/code&gt;), which is basically just a variable that can take a number of values (in this case, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt;) and whose value can be updated as needed (in this case, set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; if the user click on “Delete account”).&lt;/p&gt;

&lt;p&gt;Sometimes, only one component needs to have access to the state, but not always. For instance, I wanted both the navbar and the account page to display the user’s name, which I stored inside a user state. These are different components, so I needed two components to have access to the same user state. How do you do that? One way is to use props.&lt;/p&gt;

&lt;p&gt;React components have something called props, which (if you are using functional components) are parameters where you can pass in values as arguments. React will then use these values to render the component differently depending on which arguments you passed–for instance, setting the modal’s display to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;block&lt;/code&gt; if you set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;show&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;none&lt;/code&gt; if you set it to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt;. Usually, you pass these props in the component’s parent component. So, if your modal is inside your account page, for instance, you might write something like this in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Account.js&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-jsx&quot; data-lang=&quot;jsx&quot;&gt;    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Modal&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here, we are passing the value of the show state to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Modal&lt;/code&gt; component as a prop.&lt;/p&gt;

&lt;p&gt;So, props are passed from parent to child. If that’s how we pass states, however, we may end up with long chains of passing where one state is passed from one component to its child, and then from the child to its &lt;em&gt;own&lt;/em&gt; child, and so on until the state reaches the desired component. This is known as &lt;strong&gt;prop drilling&lt;/strong&gt;, and it can get quite obnoxious, which is why we use context.&lt;/p&gt;

&lt;h2 id=&quot;context-reducers-and-actions&quot;&gt;Context, reducers, and actions&lt;/h2&gt;
&lt;p&gt;A context–and again, this is just my current, (possibly incomplete!) understanding–is basically a place where we store states that we then can access from anywhere within our app. There are different ways of implementing context, but I used a context manager called Redux.&lt;/p&gt;

&lt;p&gt;Whenever we use states, we need a way of updating those states–setting a modal’s &lt;em&gt;show&lt;/em&gt; state to &lt;em&gt;true&lt;/em&gt; when the user clicks on “Delete account”, or setting &lt;em&gt;user&lt;/em&gt; to &lt;em&gt;null&lt;/em&gt; when they log out. If we’re &lt;em&gt;using component-level&lt;/em&gt; state–basically, a state that only one component needs access too–this is quite easy to do. React comes with a built-in &lt;em&gt;useState&lt;/em&gt; function which initializes a &lt;em&gt;state&lt;/em&gt; variable to a &lt;em&gt;defaultValue&lt;/em&gt; and simultaneously creates a corresponding &lt;em&gt;setState&lt;/em&gt; function that we can then use to update the state in question:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setShow&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;defaultValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is all done from within the component that needs access to the state, and since we are dealing with component-level state, there is no need to pass it around.&lt;/p&gt;

&lt;p&gt;If we are using &lt;em&gt;app-level state&lt;/em&gt;–state that need to access from anywhere within our application–well, that’s a different story. If you use Redux like I did, you want to use something called &lt;em&gt;reducers&lt;/em&gt;, whose sole purpose is to update your app’s state. However, you don’t want to call these reducers directly. Instead, you want to create something called actions, which are functions responsible for calling the reducers.&lt;/p&gt;

&lt;p&gt;Why the extra step? Because, often, your app’s state is not the only thing that needs updating. If a user deletes a post, for instance, and you have your posts stored in your app’s state, then, of course, you want to update the state, but you also want to update the database. Otherwise, that pesky post will not really be gone–it will show up again on the next session.&lt;/p&gt;

&lt;p&gt;So, often, you want to keep your state and your database in synch–and that’s where actions come in. Actions help you update your state and your database in parallel (or roughly in parallel). So, for instance, you might have a deletePost action which takes a post ID as an argument and makes a DELETE request to your server to tell it to delete the post from the database. Once the database is updated, your deletePost action can tell the reducer to delete the post from the state. So, deletePost is responsible for talking to both the database and the reducers, and this is how you can keep your database and state in synch.&lt;/p&gt;

&lt;p&gt;One of the most important things I learned in this project was probably how to make efficient use of actions. And one point, I was using deletePost to update the database only. It would make a DELETE request to the server, but it wouldn’t tell the reducer to update the state. Instead, I called another action getPosts, which made a GET request to the server to fetch all the relevant posts. The server would send those posts back to my frontend, which would then call the reducers to update the state. Only then would my app’s state update. I then realized this was stupid because I was making two separate calls to my server, and because I was requesting a lot of unnecessary data. When a user deletes a post, all other posts remain unchanged and so I don’t need to get all posts–I already have most of them stored in the app, and most of them are up to date. To update the state, all I need is the one post that got deleted–and not even that, just the ID. As soon as I realized this, I switched to the correct approach: use the same action to update both the database and the state. No separate calls.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;/h2&gt;
&lt;p&gt;Well, I think that just about sums up the most important things I learned in making my first React app.&lt;/p&gt;

&lt;p&gt;I now have three apps, only two more to go until I have a working portfolio. I have been so busy making apps that I have neglected my personal website, so this feels like a good time to take a breaking from app-making to give my website a little upgrading, putting to use everything I’ve learned so far.&lt;/p&gt;</content><author><name></name></author><category term="react" /><summary type="html">As I mentioned in my previous post, my plan for teaching myself web development is to build a largeish project after each course I complete. The last course I completed was Brad Traversy’s React Front to Back, and so around three weeks or four ago, I set out to build my first React app. Here are the results...</summary></entry><entry><title type="html">Making my first Express app</title><link href="http://localhost:4000/express/2021/12/06/making-my-first-express-app.html" rel="alternate" type="text/html" title="Making my first Express app" /><published>2021-12-06T16:04:39-06:00</published><updated>2021-12-06T16:04:39-06:00</updated><id>http://localhost:4000/express/2021/12/06/making-my-first-express-app</id><content type="html" xml:base="http://localhost:4000/express/2021/12/06/making-my-first-express-app.html">&lt;p&gt;Two weeks ago, I completed Colt Steele’s web dev bootcamp and set out to build my own app applying what I learned. Here are the &lt;a href=&quot;https://tidybuddy.herokuapp.com/&quot;&gt;results&lt;/a&gt;, and here’s the &lt;a href=&quot;https://github.com/arturo-jc/TidyBuddy&quot;&gt;repository&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(This is part of my larger plan to teach myself web development by doing one largeish project after each course I complete. Next up, Brad Traversy’s React Front to Back).&lt;/p&gt;

&lt;p&gt;Anyway, this time I made a point to write down each thing I learned as I worked on my project. Looking at my list, it may be broken down into three big topics:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Express&lt;/li&gt;
  &lt;li&gt;EJS&lt;/li&gt;
  &lt;li&gt;Mongoose&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;express&quot;&gt;Express&lt;/h2&gt;
&lt;p&gt;One of the big things I learned about Express was how to handle errors in a more organized way—how to divide the labor between controllers, middleware and error-handler.&lt;/p&gt;

&lt;p&gt;In Colt Steele’s course, I learned how to use middleware to perform some basic checks—is the user logged in? Does the user own the resource in question? I copied this basic pattern, but at one point I found myself performing simple checks in the controllers themselves—for instance, checking if two passwords matched. I did this out of convenience—the logic was simple and didn’t reduce readability. I was both throwing errors and &lt;em&gt;handling&lt;/em&gt; those errors in the controllers themselves—flashing and redirecting the user in some cases, calling next on the error in others. I was also handling errors directly in my middleware—again, flashing/redirecting in some middleware functions, calling next in others. But then I realized this was probably not a good idea in the long run.&lt;/p&gt;

&lt;p&gt;So, what did I do? I delegated &lt;em&gt;all&lt;/em&gt; authorization checks to my middleware, and used my controllers exclusively for interacting with the DB and rendering templates—no errors thrown in my controllers. And then I moved &lt;em&gt;all&lt;/em&gt; the error handling—all the decision-making as to how to handle this or that error—from my middleware to my… well, error-handler.&lt;/p&gt;

&lt;p&gt;This involved some creativity. When I was handling errors and failed checks directly in the controllers, this was easy—I could simply flash and redirect right from the controller, for instance. Now I had to tell the error-handler what to do with a given error via the middleware. How do I tell the error-handler that I want certain errors flashed and others rendered?&lt;/p&gt;

&lt;p&gt;To do this, I adapted a technique I learned from Colt Steele. Following Steele, I defined an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExpressError&lt;/code&gt; class that extends &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Error&lt;/code&gt; and has &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;message&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;statusCode&lt;/code&gt; parameters, except I added an optional &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt; parameter. Then I used this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt; parameter to communicate from my middleware to my error-handler how I wanted each error handled. So, for instance, some middleware functions would throw an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExpressError&lt;/code&gt; and pass in “AuthorizationErrorFlash” as its name, others would pass “AuthorizationErrorRender”, and my error-handler would handle them accordingly. Then, when I wanted an authorization error in a given route to result in a flash message, I would simply pass in the appropriate middleware to the route in question. If I change my mind later on, it’s as easy as passing in a different middleware.&lt;/p&gt;

&lt;p&gt;The other big thing I learned about Express was how to pass data directly from one controller to another—without the use of the DB.&lt;/p&gt;

&lt;p&gt;Here’s the problem I faced. My dashboard template contains a feed. Inside the feed there can be many activities. Each activity has a comment section that’s hidden by default. The user can decide to open the comment section and post a comment, at which point the page refreshes, which means all comment sections are again hidden by default. That’s bad user experience. If you post a comment, you want to see it right away. So whenever a user posts a comment, I had to render the template in such a way that all comment sections are hidden by default &lt;em&gt;except for&lt;/em&gt; whichever activity the user just commented under.&lt;/p&gt;

&lt;p&gt;How do you do that? The first part was easy. From my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;showHousehold&lt;/code&gt; controllers which renders the dashboard, pass in a string to an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;activityId&lt;/code&gt; parameter in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;res.render&lt;/code&gt;, then when you’re rendering the comment sections below each activity, use EJS to include a “hidden” class if and only if the activity’s ID matches whatever string you passed as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;activityId&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ejs&quot; data-lang=&quot;ejs&quot;&gt;    &amp;lt;div class=&quot;comment-section &amp;lt;%= activity._id.toString() === activityId? &apos;&apos; : &apos;hidden&apos; %&amp;gt;&quot;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The problem is, how do I get the ID of whichever activity the user just commented under? Well, comments are created in my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;createComment&lt;/code&gt; controller, so that’s where the ID had to come from.&lt;/p&gt;

&lt;p&gt;One option would have been to render the dashboard right from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;createComment&lt;/code&gt; controller, but that wasn’t a good idea. There’s a good deal of logic that goes into rendering the dashboard, so rendering it from both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;showHousehold&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;createComment&lt;/code&gt; would have resulted in a lot of duplication.&lt;/p&gt;

&lt;p&gt;Rather than rendering, I had to redirect the user to my show household route so that my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;showHousehold&lt;/code&gt; controller could carry out all that logic, but I had to somehow pass the activity ID from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;createComment&lt;/code&gt; over to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;showHousehold&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;How do you do that? My solution was to pass it as a query string. Then I could simply catch the activity ID in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;showHousehold&lt;/code&gt; and pass it to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;res.render&lt;/code&gt; so that my app knows which comment sections to display and which to hide.&lt;/p&gt;

&lt;h2 id=&quot;ejs&quot;&gt;EJS&lt;/h2&gt;
&lt;p&gt;Two big things, which are probably going to strike experienced users as quite basic.&lt;/p&gt;

&lt;p&gt;At one point, I needed to call a function that calculates the first day of the current week inside an EJS template. But I didn’t want to &lt;em&gt;define&lt;/em&gt; the function inside the template—I didn’t want to clutter the template. Besides, I may need that function again in a different template. So, I learned that if you have some reusable JS code, you can always move it all to its dedicated EJS file, then include that file where needed. Handy!&lt;/p&gt;

&lt;p&gt;Another problem I faced was I wanted to loop over an array and create a todo-item for each element of the array. Since I wanted to reuse this code, I created a dedicated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;item.ejs&lt;/code&gt; partial I could include in different places. First, I tried:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ejs&quot; data-lang=&quot;ejs&quot;&gt;    for (let item of items){
        &amp;lt;%- include(&quot;./item&quot;) %&amp;gt;
    }&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Bad news: item is undefined in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;item.ejs&lt;/code&gt;. Good news: the solution was not too far off. After a bit of googling, I discovered you can simply pass arguments to template parameters (such as item) by putting them inside an object and passing that object to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;include&lt;/code&gt;, so I made a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;items.ejs&lt;/code&gt; partial and did:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ejs&quot; data-lang=&quot;ejs&quot;&gt;    for (let item of frequentItems){
        &amp;lt;%- include(&quot;./items&quot;, {items: frequentItems}) %&amp;gt;
    }&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now I can use the same &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;items.ejs&lt;/code&gt; partial and just pass different arrays into the items parameter. Neat!&lt;/p&gt;

&lt;h2 id=&quot;mongoose&quot;&gt;Mongoose&lt;/h2&gt;
&lt;p&gt;This is probably the topic I learned the most about.&lt;/p&gt;

&lt;p&gt;The most important thing I learned was probably populating a document several levels deep.&lt;/p&gt;

&lt;p&gt;In my app, every user should belong to a household. In order to render the dashboard, the user’s household document needs to be &lt;em&gt;fully&lt;/em&gt; populated—every field and subfield.&lt;/p&gt;

&lt;p&gt;My household documents have an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;activityTypes&lt;/code&gt; field, which is meant to store an array of activity type documents. Easy enough to populate:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;household&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Household&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;householdId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;populate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;activityTypes&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Problem is, activity type documents have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;completedBy&lt;/code&gt; field, which is meant to store an array of activity documents. That needs to be populated as well. No big deal:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;household&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Household&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;householdId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;populate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;activityTypes&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;populate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;completedBy&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So far, so good. But activity documents have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt; field that itself needs to be populated. And that’s how I ended up with this monstruous-looking thing:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;    &lt;span class=&quot;nx&quot;&gt;household&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Household&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;householdId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;populate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;activityTypes&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;populate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;completedBy&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;populate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The second big thing I learned was how to delete subdocument arrays.&lt;/p&gt;

&lt;p&gt;In addition to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt; field mentioned above, my activity documents also have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;comments&lt;/code&gt; field, which is meant to store an array of—you guess it—comment documents. When an activity is deleted, there is nowhere for its comments to go, and so those comments should be automatically deleted along with it.&lt;/p&gt;

&lt;p&gt;Turns out Mongoose middleware is tailor-made for this. All I had to do was plug this in to my activity schema:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;    &lt;span class=&quot;nx&quot;&gt;ActivitySchema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;findOneAndDelete&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;activity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;activity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;deleteMany&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;$in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;activity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;comments&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This tells Mongoose that if it deletes an activity, it should also delete all comments whose Id is included in the activity’s comments field, which is just what I wanted.&lt;/p&gt;

&lt;p&gt;The third big thing I learned about Mongoose is how to delete “dead” references from documents. Here’s what I mean.&lt;/p&gt;

&lt;p&gt;My household documents have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;users&lt;/code&gt; field, which is meant to store an array of user documents. Except it doesn’t actually store the documents inside the array—instead, it stores a &lt;em&gt;reference&lt;/em&gt; to each document that Mongoose uses to fetch the documents in question.&lt;/p&gt;

&lt;p&gt;The problem is that when you delete a user document from the DB, the reference is not deleted from the users array. The array now contains a reference to a document that no longer exists. This is what I meant by a “dead” reference. This doesn’t cause problems in my limited experience, but I don’t like it all the same.&lt;/p&gt;

&lt;p&gt;Since Mongoose wouldn’t automatically remove these references for me, I had to learn how to do it myself. So now when I delete a user in my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deleteAccount&lt;/code&gt; controller, I call:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Household&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;updateMany&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;$pull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In a StackOverFlow thread, someone suggested to use Mongoose middleware for this purpose. However, I ran into circularity issues when I tried this approach (I was requesting two models into each other and using them to define each other). For all I know, it may be possible to get around this problem, but I didn’t keep trying as I was satisfied with the solution above.&lt;/p&gt;

&lt;p&gt;The last Mongoose thing I learned was this. In my app, a user can request to join a household. When a user makes a request, I want to push the user into the household’s pendingRequests field, but &lt;em&gt;only if the user is not already in the field in question&lt;/em&gt; (no point adding them twice over!)&lt;/p&gt;

&lt;p&gt;I spent an embarrassing amount of time searching how to perform this kind of logic with Mongoose’s findByIdAndUpdate method, but it was worth it in the end because I learned about Mongo’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$addToSet&lt;/code&gt; operator, which does exactly what I wanted:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Household&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findByIdAndUpdate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;householdId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;$addToSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pendingRequests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;One last thing that’s not exactly about Mongoose, but about a Mongoose plugin. For authentication, I used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;passport&lt;/code&gt; in conjunction with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;passport-local-mongoose&lt;/code&gt;. What the last package does is it adds a number of methods to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt; model. You can use these methods to create and pass a strategy to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;passport&lt;/code&gt; like so:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;    &lt;span class=&quot;nx&quot;&gt;passport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;LocalStrategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;authenticate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LocalStrategy&lt;/code&gt; comes from a further package called passport-local—more about it in a moment).&lt;/p&gt;

&lt;p&gt;However, I did not like the way &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;passport-local-mongoose&lt;/code&gt; handles authentication by default. It fetches the user by username. I didn’t like that. Fortunately, you can tell &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;passport-local-mongoose&lt;/code&gt; to use email instead:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;    &lt;span class=&quot;nx&quot;&gt;UserSchema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;passportLocalMongoose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;usernameField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;However, this is still not going to work—and this took me an embarrassingly long time to figure out. As I said, what this plug in does is add methods to your User model that you can then use to create and pass a strategy to passport. One of those methods is .authenticate, which works just fine if you’re happy with the way passport-local-mongoose handles authentication by default. But if you want it to use email instead (like I told it to above), you need to use a different method called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.authenticate&lt;/code&gt; like so:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;    &lt;span class=&quot;nx&quot;&gt;passport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createStrategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice I am no longer relying on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LocalStrategy&lt;/code&gt;, which means I no longer need to require &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;passport-local&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And that’s it for now.&lt;/p&gt;

&lt;p&gt;Until next time!&lt;/p&gt;</content><author><name></name></author><category term="express" /><summary type="html">Two weeks ago, I completed Colt Steele’s web dev bootcamp and set out to build my own app applying what I learned. Here are the results...</summary></entry><entry><title type="html">Making my first web app with flask</title><link href="http://localhost:4000/flask/2021/10/21/making-my-first-web-app-with-flask.html" rel="alternate" type="text/html" title="Making my first web app with flask" /><published>2021-10-21T17:04:39-05:00</published><updated>2021-10-21T17:04:39-05:00</updated><id>http://localhost:4000/flask/2021/10/21/making-my-first-web-app-with-flask</id><content type="html" xml:base="http://localhost:4000/flask/2021/10/21/making-my-first-web-app-with-flask.html">&lt;p&gt;I just completed my first web application using Flask, so I thought it would be a good idea to write down some reflections on my experience while the project is still fresh in my mind.&lt;/p&gt;

&lt;p&gt;My goal for the app was to have the user create a template, set some parameters such as starting date and starting weights, then have the app automatically generate a workout program based on the values entered by the user. Figuring how to generate the program and enter it into the database took some trial and error, but things went more or less smoothly. The real challenge was figuring out how to display the program.&lt;/p&gt;

&lt;p&gt;The way my application works, each program object has a number of child workout objects. In turn, each workout object has date and week attributes as well as a number of child exercise objects.&lt;/p&gt;

&lt;p&gt;The desired functionality was to have the user select a program and a week, and display all matching workouts along with their corresponding exercises in a table, each column representing a different day of the week.&lt;/p&gt;

&lt;p&gt;But how do you build such a table using Jinja (Flask’s templating language)? My first instinct was to build the table column by column. So, starting with the Monday column, I wanted to loop through the Monday workouts, and for each workout, create one cell for the workout’s name and one for each of its exercises, each cell sitting on top of the next. I wanted to create all these cells in the Monday column before moving on to the next column.&lt;/p&gt;

&lt;p&gt;It turns out you cannot do this. In HTML, you cannot build a table column by column–you can only build it row by row. This is because you need to close each tag before you open the next. This meant that for each row, I had to create all cells within that row before moving on to the next.&lt;/p&gt;

&lt;p&gt;So then I tried looping through all the workouts for the week, creating one row for each workout and one for each of its exercises. Inside each row, I created seven cells (corresponding to the seven days of the week) before closing the tag. If there was a workout scheduled for the corresponding day, the cell displayed the workout’s name or one of its exercises–otherwise the cell was blank.&lt;/p&gt;

&lt;p&gt;This method works, but it results in a lot of wasted space. Suppose your program has only one workout on Monday and one workout on Tuesday–call them A and B. You would expect A and B to sit at the same level in the table. But that’s not what you get with this method. Instead, each workout get its own “level”–that is, each workout gets its own set of rows. So, you get one set of rows displaying A on Monday but nothing on Tuesday, and another set of rows below displaying B on Tuesday but nothing on Monday. That’s no good.&lt;/p&gt;

&lt;p&gt;To get around these problems, I tried writing some convoluted Jinja code inside the HTML template before ultimately settling on a different kind of solution. The solution was to organize workouts into structures I called “layers” before passing them to the template. This approach is too convoluted to describe in any real detail here, but you can take a look at the solution if you search for “TABLE DATA” &lt;a href=&quot;https://github.com/arturo-jc/musqlo/blob/master/main.py&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So, what lessons can we draw from all this? I would say the main lesson is this. Even though you can use Jinja to write some logic inside the HTML template, you should really keep that to a minimum. Instead, you should stick all the logic inside your Flask application, and pass all the required data to the template in a format that makes it easy to work with inside the template.&lt;/p&gt;

&lt;p&gt;This is something I first heard about in Angela Yu’s Python Udemy course, but doing this project really drove the point home.&lt;/p&gt;</content><author><name></name></author><category term="flask" /><summary type="html">I just completed my first web application using Flask, so I thought it would be a good idea to write down some reflections on my experience while the project is still fresh in my mind...</summary></entry></feed>